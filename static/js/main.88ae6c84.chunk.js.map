{"version":3,"sources":["components/Calendar.js","components/App.js","serviceWorker.js","index.js"],"names":["Calendar","state","currentMonth","Date","selectedDate","onDateClick","day","_this","setState","nextMonth","dateFns","addMonths","prevMonth","subMonths","react_default","a","createElement","className","onClick","this","format","days","startDate","startOfWeek","i","push","key","addDays","_this2","_this$state","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","_loop","cloneDay","concat","isSameMonth","isSameDay","parse","renderHeader","renderDays","renderCells","React","Component","App","id","components_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88ae6c84.chunk.js","sourcesContent":["import React from \"react\";\nimport dateFns from \"date-fns\";\n\nclass Calendar extends React.Component {\n\tstate = {\n\t\tcurrentMonth: new Date(),\n\t\tselectedDate: new Date()\n\t};\n\n\trenderHeader() {\n\t\tconst dateFormat = \"MMMM YYYY\";\n\n\t\treturn (\n\t\t\t<div className=\"header row flex-middle\">\n\t\t\t\t<div className=\"col col-start\">\n\t\t\t\t\t<div className=\"icon\" onClick={this.prevMonth}>\n\t\t\t\t\t\tchevron_left\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col col-center\">\n\t\t\t\t\t<span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col col-end\" onClick={this.nextMonth}>\n\t\t\t\t\t<div className=\"icon\">chevron_right</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderDays() {\n\t\tconst dateFormat = \"dddd\";\n\t\tconst days = [];\n\n\t\tlet startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n\t\tfor (let i = 0; i < 7; i++) {\n\t\t\tdays.push(\n\t\t\t\t<div className=\"col col-center\" key={i}>\n\t\t\t\t\t{dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn <div className=\"days row\">{days}</div>;\n\t}\n\n\trenderCells() {\n\t\tconst { currentMonth, selectedDate } = this.state;\n\t\tconst monthStart = dateFns.startOfMonth(currentMonth);\n\t\tconst monthEnd = dateFns.endOfMonth(monthStart);\n\t\tconst startDate = dateFns.startOfWeek(monthStart);\n\t\tconst endDate = dateFns.endOfWeek(monthEnd);\n\n\t\tconst dateFormat = \"D\";\n\t\tconst rows = [];\n\n\t\tlet days = [];\n\t\tlet day = startDate;\n\t\tlet formattedDate = \"\";\n\n\t\twhile (day <= endDate) {\n\t\t\tfor (let i = 0; i < 7; i++) {\n\t\t\t\tformattedDate = dateFns.format(day, dateFormat);\n\t\t\t\tconst cloneDay = day;\n\t\t\t\tdays.push(\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`col cell ${\n\t\t\t\t\t\t\t!dateFns.isSameMonth(day, monthStart)\n\t\t\t\t\t\t\t\t? \"disabled\"\n\t\t\t\t\t\t\t\t: dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\tkey={day}\n\t\t\t\t\t\tonClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"number\">{formattedDate}</span>\n\t\t\t\t\t\t<span className=\"bg\">{formattedDate}</span>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t\tday = dateFns.addDays(day, 1);\n\t\t\t}\n\t\t\trows.push(\n\t\t\t\t<div className=\"row\" key={day}>\n\t\t\t\t\t{days}\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tdays = [];\n\t\t}\n\t\treturn <div className=\"body\">{rows}</div>;\n\t}\n\n\tonDateClick = day => {\n\t\tthis.setState({\n\t\t\tselectedDate: day\n\t\t});\n\t};\n\n\tnextMonth = () => {\n\t\tthis.setState({\n\t\t\tcurrentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n\t\t});\n\t};\n\n\tprevMonth = () => {\n\t\tthis.setState({\n\t\t\tcurrentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"calendar\">\n\t\t\t\t{this.renderHeader()}\n\t\t\t\t{this.renderDays()}\n\t\t\t\t{this.renderCells()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Calendar;","\nimport React from \"react\";\n\nimport Calendar from \"./Calendar\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header>\n\t\t\t\t\t<div id=\"logo\">\n\t\t\t\t\t\t<span className=\"icon\">date_range</span>\n\t\t\t\t\t\t<span>\n              react<b>calendar</b>\n            </span>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<Calendar />\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}